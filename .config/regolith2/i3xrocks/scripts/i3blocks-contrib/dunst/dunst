#!/usr/bin/env python3
"""
A do-not-disturb button for muting Dunst notifications in i3 using i3blocks

Mute is handled using the `dunstctl` command.
"""

__author__ = "Jessey White-Cinis <j@cin.is>"
__copyright__ = "Copyright (c) 2019 Jessey White-Cinis"
__license__ = "MIT"
__version__ = "1.1.0"

import os
import subprocess as sp
import json

DBUS_COMMAND = [
    "dbus-send",
    "--print-reply=literal",
    "--dest=org.freedesktop.Notifications",
    "/org/freedesktop/Notifications",
    "org.freedesktop.DBus.Properties.{}",
    "string:org.dunstproject.cmd0",
    "string:{}",
]

def _send_dbus_cmd(action: str, element: str, value: str = '') -> str:
    command = DBUS_COMMAND
    command[4] = command[4].format(action)
    command[6] = command[6].format(element)
    if value:
        command.append(value)
    return str(sp.check_output(command))


def _property_get(element: str):
    _send_dbus_cmd('Get', element)

def _property_set(element: str, value: str):
    _send_dbus_cmd('Set', element, value)

def mute_toggle():
    '''Toggle dunst notifications'''
    # sp.run(["dunstctl", "set-paused", "toggle"], check=True)
    ispaused = _property_get('paused')
    if ispaused == 'true':
        _property_set('paused', 'variant:boolean:false')
    else:
        _property_set('paused', 'variant:boolean:false')


def clicked():
    '''Returns True if the button was clicked'''
    button = os.environ.get("BLOCK_BUTTON", None)
    return bool(button)

def muted():
    '''Returns True if Dunst is muted'''
    output = sp.check_output(('dunstctl', 'is-paused'))
    return u'true' ==  output.strip().decode("UTF-8")

if clicked():
    # toggle button click to turn mute on and off
    mute_toggle()

if muted():
    RTN = {"full_text":"<span font='Font Awesome 5 Free Solid' color='#BE616E'>\uf1f6</span>"}
else:
    RTN = {"full_text":"<span font='Font Awesome 5 Free Solid' color='#A4B98E'>\uf0f3</span>"}

print(json.dumps(RTN))

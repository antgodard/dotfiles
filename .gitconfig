[alias]
    alog    = log --color --graph --pretty = format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --branches --remotes --tags
    am3     = am -3
    amab    = am --abort
    amco    = am --continue
    br      = branch
    caa     = commit -a --amend -C HEAD
    ch      = checkout
    co      = commit --verbose --stat
    corig   = commit -C ORIG_HEAD
    dif     = diff -p --stat
    difs    = dif --staged
    fpatch1 = format-patch -1
    hardres = reset --hard HEAD~
    olog    = log --pretty                 = format:'%C(red)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar)%Creset'
    pfl     = push --force-with-lease
    plog    = log --color --graph --pretty = format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    pu      = push
    re      = reset
    reb     = rebase
    rebco   = rebase --continue
    rebi    = rebase -i
    res     = "!f() { git reset --soft HEAD~; git reset; }; f"
    softres = reset --soft HEAD~
    st      = status

    # stash, checkout, stash pop
    chst  = "!f() { git stash; git checkout $1; git stash pop; }; f"
    # git commit with [squash] prefix and optional "msg"
    cosq = "!f() { \
	git commit -m \"[squash] $1\"; \
	}; f"
    # mini and pretty log
    mlog = "!f() { \
	git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit | head -15; \
	}; f"
    # git rebonto $1 $2
    rebonto = "!f() { \
	git rebase --onto $1 origin/$1 $2; \
	}; f"
    #Â rename a branch on local and remote
    rename-branch = "!f() { \
	git checkout $2; \
	git branch -m $3; \
	git push $1 -u $3; \
	git push $1 --delete $2; \
	}; f"
[core]
    editor = nvim

[user]
    name  = antznin
    email = antoningodard@protonmail.com

[color]
    ui = auto
